// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id
  name String 
  password String
  myrooms Room[] @relation("myrooms") 
  joinedrooms Room[] 
  conversations Conversation[] @relation("convo")
  notifications Notification[]
  agrees Conversation[] @relation("agree")
  disagrees Conversation[] @relation("disagree")
}

model Notification {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  userId Int
}

model Room {
  id Int @id @default(autoincrement())
  name String @unique
  topic Topic @relation(fields: [topicId], references: [id])
  topicId Int
  members User[] 
  creator User @relation(fields: [creatorId], references: [id], "myrooms")
  creatorId Int
  conversations Conversation[] 
  type RoomType @default(OPEN)
}

enum RoomType {
  OPEN
  CLOSED
}

model Topic {
  id Int @id @default(autoincrement())
  name String @unique
  rooms Room[]
}

model Trends {
  id Int @id @default(autoincrement())
  hashtag String @unique
  conversations Conversation []
}

model Conversation {
  id Int @id @default(autoincrement())
  talker User @relation(fields: [talkerId], references: [id], "convo")
  talkerId Int 
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int
  agree User[] @relation("agree")
  disagree User[] @relation("disagree")
  trend Trends? @relation(fields: [trendId], references: [id])
  trendId Int?
  comments Conversation[] @relation("comments")
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade, "comments")
  conversationId Int?
  convo String
  media String[]
  createdAt DateTime @default(now())
}

model Chat {
  id Int @id
  messages Message[] 
}

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  text String
  media String[] 
  chat Chat? @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId Int?
  type MessageType @default(SENT)
}

enum MessageType {
  RECEIVED
  SENT
}